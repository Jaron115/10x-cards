-- migration: initial schema setup for 10x-cards project
-- purpose: create flashcards, generations, and generation_error_logs tables with RLS policies
-- affected tables: flashcards, generations, generation_error_logs
-- special considerations: 
--   - references auth.users table managed by supabase auth
--   - implements row-level security for all tables
--   - includes automatic updated_at trigger for flashcards table
--   - ensures gdpr compliance with cascade deletes

-- ============================================================================
-- 1. create custom enum types
-- ============================================================================

-- enum for flashcard source tracking
-- values: 'manual' (user created), 'ai-full' (ai generated, unedited), 'ai-edited' (ai generated, user edited)
create type flashcard_source as enum ('manual', 'ai-full', 'ai-edited');

-- ============================================================================
-- 2. create tables
-- ============================================================================

-- flashcards table: stores user-created and ai-generated flashcards
create table flashcards (
  id bigserial primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  generation_id bigint null, -- will be linked after generations table is created
  front varchar(200) not null,
  back varchar(500) not null,
  source flashcard_source not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- add comment explaining the table purpose
comment on table flashcards is 'stores flashcards created manually or generated by ai';
comment on column flashcards.generation_id is 'links to generation process if flashcard was ai-generated, null for manual cards';
comment on column flashcards.source is 'tracks origin: manual, ai-full (unedited), or ai-edited';

-- generations table: tracks ai flashcard generation metadata and statistics
create table generations (
  id bigserial primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  generation_time timestamptz not null default now(),
  duration_ms integer not null,
  model varchar(255),
  generated_count integer not null,
  accepted_unedited_count integer not null,
  accepted_edited_count integer not null,
  source_text_hash varchar(64) not null,
  source_text_length integer not null check (source_text_length >= 1000 and source_text_length <= 10000)
);

-- add comment explaining the table purpose
comment on table generations is 'tracks metadata and statistics for ai flashcard generation processes';
comment on column generations.duration_ms is 'time taken for ai generation in milliseconds';
comment on column generations.source_text_hash is 'sha-256 hash of input text for deduplication';
comment on column generations.source_text_length is 'length of source text, must be between 1000-10000 characters';

-- generation_error_logs table: logs errors from ai api interactions
create table generation_error_logs (
  id uuid primary key default gen_random_uuid(),
  user_id uuid null references auth.users(id) on delete cascade,
  model varchar(255),
  source_text_hash varchar(64),
  source_text_length integer,
  error_code varchar(100),
  error_message text,
  created_at timestamptz not null default now()
);

-- add comment explaining the table purpose
comment on table generation_error_logs is 'logs errors that occur during ai api communication for debugging and monitoring';
comment on column generation_error_logs.user_id is 'optional user reference, null if error occurs before user identification';

-- now add the foreign key constraint from flashcards to generations
alter table flashcards
  add constraint fk_flashcards_generation_id
  foreign key (generation_id)
  references generations(id)
  on delete set null;

comment on constraint fk_flashcards_generation_id on flashcards is 'links flashcard to generation process, set to null if generation record is deleted';

-- ============================================================================
-- 3. create indexes for performance optimization
-- ============================================================================

-- indexes on foreign keys for efficient joins and filtering
create index idx_flashcards_user_id on flashcards(user_id);
create index idx_flashcards_generation_id on flashcards(generation_id);
create index idx_generations_user_id on generations(user_id);
create index idx_generation_error_logs_user_id on generation_error_logs(user_id);

-- additional indexes for common query patterns
create index idx_flashcards_created_at on flashcards(created_at desc);
create index idx_generations_generation_time on generations(generation_time desc);

-- ============================================================================
-- 4. create trigger function for automatic updated_at timestamp
-- ============================================================================

-- trigger function to automatically update the updated_at column
-- this ensures updated_at always reflects the last modification time
create or replace function handle_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- attach trigger to flashcards table
-- fires before any update operation to set the current timestamp
create trigger on_flashcards_update
  before update on flashcards
  for each row
  execute function handle_updated_at();

-- ============================================================================
-- 5. enable row level security (rls)
-- ============================================================================

-- enable rls on all tables to enforce data access policies
alter table flashcards enable row level security;
alter table generations enable row level security;
alter table generation_error_logs enable row level security;

-- ============================================================================
-- 6. create rls policies for flashcards table
-- ============================================================================

-- policy: allow authenticated users to select their own flashcards
create policy "flashcards_select_own"
  on flashcards
  for select
  to authenticated
  using (auth.uid() = user_id);

-- policy: allow authenticated users to insert their own flashcards
create policy "flashcards_insert_own"
  on flashcards
  for insert
  to authenticated
  with check (auth.uid() = user_id);

-- policy: allow authenticated users to update their own flashcards
create policy "flashcards_update_own"
  on flashcards
  for update
  to authenticated
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- policy: allow authenticated users to delete their own flashcards
-- warning: this is a destructive operation that permanently removes flashcard data
create policy "flashcards_delete_own"
  on flashcards
  for delete
  to authenticated
  using (auth.uid() = user_id);

-- ============================================================================
-- 7. create rls policies for generations table
-- ============================================================================

-- policy: allow authenticated users to select their own generation records
create policy "generations_select_own"
  on generations
  for select
  to authenticated
  using (auth.uid() = user_id);

-- policy: allow authenticated users to insert their own generation records
create policy "generations_insert_own"
  on generations
  for insert
  to authenticated
  with check (auth.uid() = user_id);

-- policy: allow authenticated users to update their own generation records
create policy "generations_update_own"
  on generations
  for update
  to authenticated
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- policy: allow authenticated users to delete their own generation records
-- warning: this is a destructive operation that permanently removes generation metadata
-- note: due to on delete set null, associated flashcards will have generation_id set to null
create policy "generations_delete_own"
  on generations
  for delete
  to authenticated
  using (auth.uid() = user_id);

-- ============================================================================
-- 8. create rls policies for generation_error_logs table
-- ============================================================================

-- policy: allow authenticated users to select their own error logs
-- rationale: users can view errors related to their generation attempts for debugging
create policy "generation_error_logs_select_own"
  on generation_error_logs
  for select
  to authenticated
  using (auth.uid() = user_id);

-- policy: allow authenticated users to insert their own error logs
-- rationale: application can log errors on behalf of the authenticated user
create policy "generation_error_logs_insert_own"
  on generation_error_logs
  for insert
  to authenticated
  with check (auth.uid() = user_id or user_id is null);

-- policy: allow authenticated users to update their own error logs
-- rationale: allows updating error log metadata if needed
create policy "generation_error_logs_update_own"
  on generation_error_logs
  for update
  to authenticated
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- policy: allow authenticated users to delete their own error logs
-- warning: this is a destructive operation that permanently removes error log data
create policy "generation_error_logs_delete_own"
  on generation_error_logs
  for delete
  to authenticated
  using (auth.uid() = user_id);

-- ============================================================================
-- migration complete
-- ============================================================================
-- this migration creates the complete schema for the 10x-cards project including:
-- - flashcards table with source tracking
-- - generations table for ai generation metadata
-- - generation_error_logs table for error tracking
-- - all necessary indexes for query performance
-- - automatic updated_at trigger for flashcards
-- - comprehensive rls policies ensuring users can only access their own data
-- - gdpr-compliant cascade deletes when user accounts are removed

