/**
 * POST /api/flashcards/bulk
 * Create multiple flashcards at once (after AI generation)
 *
 * This endpoint is used to save flashcards that were generated by AI
 * and approved by the user. It updates the generation record with
 * accepted counts and creates the flashcard records.
 *
 * This endpoint requires authentication via Supabase JWT token.
 */

import type { APIContext } from "astro";
import { z } from "zod";
import type { ApiErrorDTO, ApiResponseDTO, CreateFlashcardsBulkResponseDTO } from "../../../types.ts";
import { DEFAULT_USER_ID } from "../../../db/supabase.client.ts";
import { FlashcardService } from "../../../lib/services/flashcard.service.ts";
import { NotFoundError, ValidationError } from "../../../lib/errors.ts";
import { CreateFlashcardsBulkSchema } from "../../../lib/validation/flashcard.schemas.ts";

// Disable prerendering for this API route
export const prerender = false;

/**
 * POST handler for bulk flashcard creation
 */
export async function POST({ locals, request }: APIContext): Promise<Response> {
  try {
    const supabase = locals.supabase;

    // Initialize service
    const flashcard_service = new FlashcardService(supabase);

    // Get authenticated user from locals (set by middleware)
    // TODO: After middleware is updated to include user, uncomment this:
    // const user = locals.user;
    // if (!user) {
    //   return createErrorResponse(401, "UNAUTHORIZED", "Invalid or missing authentication token");
    // }

    // Development: Using default user ID from database
    const user_id = DEFAULT_USER_ID;

    // Parse request body
    let body: unknown;
    try {
      body = await request.json();
    } catch {
      return createErrorResponse(400, "VALIDATION_ERROR", "Invalid JSON in request body");
    }

    // Validate request body
    let validated_data: z.infer<typeof CreateFlashcardsBulkSchema>;
    try {
      validated_data = CreateFlashcardsBulkSchema.parse(body);
    } catch (error) {
      if (error instanceof z.ZodError) {
        const details = error.errors.map((err) => ({
          field: err.path.join("."),
          message: err.message,
        }));

        return createErrorResponse(400, "VALIDATION_ERROR", "Validation failed", details);
      }

      return createErrorResponse(400, "VALIDATION_ERROR", "Invalid request data");
    }

    const { generation_id, flashcards } = validated_data;

    // Create flashcards in bulk
    let result: CreateFlashcardsBulkResponseDTO;
    try {
      result = await flashcard_service.createFlashcardsBulk(user_id, generation_id, flashcards);
    } catch (error) {
      // Handle specific error types
      if (error instanceof NotFoundError) {
        return createErrorResponse(404, "NOT_FOUND", error.message);
      }

      if (error instanceof ValidationError) {
        return createErrorResponse(400, "VALIDATION_ERROR", error.message, error.details);
      }

      console.error("Failed to create flashcards in bulk:", error);
      return createErrorResponse(500, "INTERNAL_ERROR", "An unexpected error occurred. Please try again later.");
    }

    // Build successful response
    const response: ApiResponseDTO<CreateFlashcardsBulkResponseDTO> = {
      success: true,
      data: result,
    };

    return new Response(JSON.stringify(response), {
      status: 201,
      headers: {
        "Content-Type": "application/json",
      },
    });
  } catch (error) {
    console.error("Unexpected error in POST /api/flashcards/bulk:", error);
    return createErrorResponse(500, "INTERNAL_ERROR", "An unexpected error occurred. Please try again later.");
  }
}

/**
 * Helper function to create error responses
 */
function createErrorResponse(
  status: number,
  code: ApiErrorDTO["error"]["code"],
  message: string,
  details?: unknown
): Response {
  const errorResponse: ApiErrorDTO = {
    success: false,
    error: {
      code,
      message,
      ...(details !== undefined && { details }),
    },
  };

  return new Response(JSON.stringify(errorResponse), {
    status,
    headers: {
      "Content-Type": "application/json",
    },
  });
}
