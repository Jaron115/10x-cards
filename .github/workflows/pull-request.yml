name: Pull Request CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v5
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  # e2e-test:
  #   name: E2E Tests
  #   needs: lint
  #   runs-on: ubuntu-latest
  #   environment: integration

  #   env:
  #     CI: true
  #     SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  #     SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
  #     SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  #     E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
  #     E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
  #     E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v6
  #       with:
  #         node-version-file: ".nvmrc"
  #         cache: "npm"

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Install Playwright browsers
  #       run: npx playwright install chromium --with-deps

  #     - name: Verify secrets are available
  #       run: |
  #         echo "Checking if secrets are available..."
  #         if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
  #           echo "❌ SUPABASE_URL secret is EMPTY or NOT SET"
  #           exit 1
  #         else
  #           echo "✅ SUPABASE_URL is available (length: $(echo -n '${{ secrets.SUPABASE_URL }}' | wc -c))"
  #         fi

  #         if [ -z "${{ secrets.SUPABASE_KEY }}" ]; then
  #           echo "❌ SUPABASE_KEY secret is EMPTY or NOT SET"
  #           exit 1
  #         else
  #           echo "✅ SUPABASE_KEY is available (length: $(echo -n '${{ secrets.SUPABASE_KEY }}' | wc -c))"
  #         fi

  #         if [ -z "${{ secrets.E2E_USERNAME }}" ]; then
  #           echo "❌ E2E_USERNAME secret is EMPTY or NOT SET"
  #           exit 1
  #         else
  #           echo "✅ E2E_USERNAME is available: ${{ secrets.E2E_USERNAME }}"
  #         fi

  #         if [ -z "${{ secrets.E2E_PASSWORD }}" ]; then
  #           echo "❌ E2E_PASSWORD secret is EMPTY or NOT SET"
  #           exit 1
  #         else
  #           echo "✅ E2E_PASSWORD is available (length: $(echo -n '${{ secrets.E2E_PASSWORD }}' | wc -c))"
  #         fi

  #     - name: Create .env file for Astro
  #       run: |
  #         {
  #           printf "SUPABASE_URL=%s\n" "${SUPABASE_URL}"
  #           printf "SUPABASE_KEY=%s\n" "${SUPABASE_KEY}"
  #           printf "SUPABASE_SERVICE_ROLE_KEY=%s\n" "${SUPABASE_SERVICE_ROLE_KEY}"
  #           printf "E2E_USERNAME_ID=%s\n" "${E2E_USERNAME_ID}"
  #           printf "E2E_USERNAME=%s\n" "${E2E_USERNAME}"
  #           printf "E2E_PASSWORD=%s\n" "${E2E_PASSWORD}"
  #         } > .env
  #         echo "✅ .env file created successfully"

  #     - name: Verify .env file was created
  #       run: |
  #         echo "Checking if .env file exists..."
  #         if [ -f .env ]; then
  #           echo "✅ .env file exists"
  #           echo "File size: $(wc -c < .env) bytes"
  #           echo "Number of lines: $(wc -l < .env)"

  #           # Check if file contains actual values (not masked ***)
  #           if grep -q "SUPABASE_URL=https://" .env; then
  #             echo "✅ SUPABASE_URL contains actual URL"
  #           else
  #             echo "❌ SUPABASE_URL does not contain actual URL (might be masked)"
  #             cat .env
  #             exit 1
  #           fi

  #           # Check SUPABASE_KEY - it should not be ***
  #           SUPABASE_KEY_LINE=$(grep "^SUPABASE_KEY=" .env || echo "")
  #           if [ -z "$SUPABASE_KEY_LINE" ]; then
  #             echo "❌ SUPABASE_KEY line not found in .env"
  #             exit 1
  #           fi

  #           # Extract the value after =
  #           SUPABASE_KEY_VALUE="${SUPABASE_KEY_LINE#*=}"

  #           if [ "$SUPABASE_KEY_VALUE" = "***" ] || [ "$SUPABASE_KEY_VALUE" = "" ]; then
  #             echo "❌ SUPABASE_KEY is masked or empty: '$SUPABASE_KEY_VALUE'"
  #             exit 1
  #           fi

  #           # Check if it's at least 50 characters (valid Supabase keys are long)
  #           if [ ${#SUPABASE_KEY_VALUE} -lt 50 ]; then
  #             echo "❌ SUPABASE_KEY is too short (${#SUPABASE_KEY_VALUE} chars): '$SUPABASE_KEY_VALUE'"
  #             exit 1
  #           fi

  #           echo "✅ SUPABASE_KEY contains actual value (${#SUPABASE_KEY_VALUE} chars, starts with '${SUPABASE_KEY_VALUE:0:4}...')"
  #         else
  #           echo "❌ .env file does NOT exist"
  #           exit 1
  #         fi

  #     - name: Run E2E tests
  #       run: npm run test:e2e

  #     - name: Upload E2E test report
  #       if: always()
  #       uses: actions/upload-artifact@v5
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 7

  #     - name: Upload E2E test results
  #       if: always()
  #       uses: actions/upload-artifact@v5
  #       with:
  #         name: e2e-test-results
  #         path: test-results/
  #         retention-days: 7

  status-comment:
    name: Post Status Comment
    needs: [lint, unit-test, e2e-test]
    if: success() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Download unit test coverage
        uses: actions/download-artifact@v6
        with:
          name: unit-test-coverage
          path: coverage/

      - name: Post success comment
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Read coverage summary if available
            let coverageInfo = '';
            try {
              const coverageSummary = JSON.parse(
                fs.readFileSync('coverage/coverage-final.json', 'utf8')
              );
              coverageInfo = '\n\n### Coverage Report\n\nUnit test coverage data collected ✅';
            } catch (error) {
              coverageInfo = '\n\n### Coverage Report\n\nCoverage data not available';
            }

            const message = `## ✅ All Checks Passed

            All CI checks have completed successfully:

            - ✅ **Linting** - Code quality checks passed
            - ✅ **Unit Tests** - All unit tests passed
            - ✅ **E2E Tests** - All end-to-end tests passed
            ${coverageInfo}

            This pull request is ready for review! 🚀`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
